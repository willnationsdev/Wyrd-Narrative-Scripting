{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/tools/wyrd-neo4j-utility.ts","src/resources/index.ts","src/components/about/about.ts","src/components/home/home.ts","src/modules/neo4j-typescript/src/index.spec.ts","src/modules/neo4j-typescript/src/index.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {RouterConfiguration, Router} from 'aurelia-router';\nimport {inject} from 'aurelia-framework';\n//import * as neo4j from 'neo4j-typescript';\nimport {Neo4jUtility} from './tools/wyrd-neo4j-utility';\n\nexport class App {\n\n  // The Router responsible for re-routing web traffic to the App.\n  public router: Router;\n\n/*\n  // The Neo4j database configuration object.\n  // Defines access methodology and credentials.\n  public neo4jConfig: neo4j.INeo4jConfig = {\n    // The credentials with which to access the neo4j API\n    authentication: {\n      username: \"neo4j\",\n      password: \"neo4j\"\n    },\n    // The protocol used to access the neo4j object\n    protocol: neo4j.NEO4J_PROTOCOL.http,\n    // The host in which to find the neo4j object\n    host: \"localhost\",\n    // The port in which to find the neo4j object\n    port: 7474\n  };\n*/\n\n  //\n  // configureRouter\n  // \n  // @param config The configuration for routers associated with the App\n  // @param router The router responsible for managing the defined routes.\n  //\n  configureRouter(config: RouterConfiguration, router: Router): void {\n    config.title = \"Aurelia\";\n\n    config.map([\n        { route: ['', 'home'], \n          name: 'home', \n          moduleId: './components/home/home',\n          nav: true,\n          title: 'Home'\n        },\n        { route: ['about'], \n          name: 'about',\n          moduleId: './components/about/about',\n          nav: true,\n          title:'About'\n        }\n\n    ]);\n\n    this.router = router;\n  }\n\n}\n\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import * as neo4j from \"neo4j-typescript\";\r\n\r\nexport class Neo4jUtility {\r\n    public static query(config: neo4j.INeo4jConfig, request: neo4j.INeo4jCypherRequest): neo4j.INeo4jCypherResponse {\r\n        let cypherResponse: neo4j.INeo4jCypherResponse = null;\r\n        neo4j.connect(config).then((response) => {\r\n            console.log(\"Successfully connected\");\r\n\r\n            let myNode: any = {\r\n                firstName: \"John\",\r\n                lastName: \"Doe\"\r\n            };\r\n\r\n            neo4j.cypher(request).then(\r\n                (value: neo4j.INeo4jCypherResponse) => { cypherResponse = value; }\r\n                );\r\n        })\r\n        return cypherResponse;\r\n    }\r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","export class About {}","export class Home {}","import \"mocha\";\nimport * as chai from  \"chai\";\nimport * as util from \"util\";\n\nimport * as neo4j from \"./index\";\nimport * as request from \"request\";\n\nlet should = chai.should();\n\ndescribe(\"Neo4j Typescript REST\", function() {\n  let neo4jConfig: neo4j.INeo4jConfig = {\n    protocol: neo4j.NEO4J_PROTOCOL.http,\n    host: \"localhost\",\n    port: 7474,\n    authentication: {\n      username: \"neo4j\",\n      password: \"neo4j\"\n    },\n    streaming: true\n  };\n  let badNeo4jConfig: neo4j.INeo4jConfig = JSON.parse(JSON.stringify(neo4jConfig));\n  let requestOptions: request.CoreOptions = neo4j.getRequestOptions();\n\n  describe(\"#connect\", function() {\n    let connection = null;\n    it(\"should fail to parse url endpoint\", function(done) {\n      badNeo4jConfig.host = null;\n      neo4j.connect(badNeo4jConfig)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done()\n        });\n    });\n    it(\"should establish a new connection\", function(done) {\n      neo4j.connect(neo4jConfig).\n        then((response) => {\n          connection = response;\n          done();\n        }).\n        catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should return an existing connection\", function(done) {\n      neo4j.connect(neo4jConfig).\n        then((response) => {\n          response.should.eql(connection);\n          done();\n        }).\n        catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should confirm a connection is present\", function(done) {\n      neo4j.isConnected().should.equal(true);\n      done();\n    });\n    it(\"should unset the http request header to streaming\", function() {\n      neo4j.setStreaming(false);\n      neo4j.isStreaming().should.equal(false);\n    });\n  });\n  describe(\"#global graph functions\", function() {\n    it(\"should fail to return all graph relationship types due to request error.\", function(done) {\n      let goodBaseUrl: string = requestOptions.baseUrl;\n      requestOptions.baseUrl = \"WRONG\";\n      neo4j.getRelationshipTypes()\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          requestOptions.baseUrl = goodBaseUrl;\n          done();\n        });\n    });\n    it(\"should return all graph relationship types\", function(done) {\n      neo4j.getRelationshipTypes()\n        .then((relationshipTypes) => {\n          relationshipTypes.should.be.instanceOf(Array);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should fail to return all graph property keys due to request error.\", function(done) {\n      let goodBaseUrl: string = requestOptions.baseUrl;\n      requestOptions.baseUrl = \"WRONG\";\n      neo4j.getAllPropertyKeys()\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          requestOptions.baseUrl = goodBaseUrl;\n          done();\n        });\n    });\n    it(\"should return all graph property keys\", function(done) {\n      neo4j.getAllPropertyKeys()\n        .then((propertyKeys) => {\n          propertyKeys.should.be.instanceOf(Array);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should create a new index on label\", function(done) {\n      neo4j.createIndex(\"test\", \"testProperty\")\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should list index just created by label\", function(done) {\n      neo4j.listIndexesForLabel(\"test\")\n        .then((response) => {\n          response[0].property_keys.should.contain(\"testProperty\");\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should drop index just created on label\", function(done) {\n      neo4j.dropIndex(\"test\", \"testProperty\")\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n  });\n  describe(\"#Cypher query function\", function() {\n    it(\"should execute a valid cypher statement\", function(done) {\n      let validCypher: neo4j.INeo4jCypherRequest = {\n        statements: [{\n          statement: \"MATCH (n) RETURN n\"\n        }]\n      };\n      neo4j.cypher(validCypher)\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should execute several valid cypher statements\", function(done) {\n      let validCypher: neo4j.INeo4jCypherRequest = {\n        statements: [\n          {\n            statement: \"MATCH (n) RETURN count(n)\"\n          },\n          {\n            statement: \"MATCH (x) RETURN x\"\n          }\n        ]\n      };\n      neo4j.cypher(validCypher)\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should return cypher responses specified by 'ResultDataContents'\", function(done) {\n      let query: string = `MATCH (n) RETURN n LIMIT 3`;\n      let cypherRequest: neo4j.INeo4jCypherRequest = {\n        statements: [{\n          statement: query,\n          resultDataContents: [\"REST\"]\n        }]\n      };\n      neo4j.cypher(cypherRequest)\n        .then((response) => {\n          response.results[0].data[0].should.have.property(\"rest\");\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n\n    });\n    it(\"should fail to execute an invalid cypher statement\", function(done) {\n      let invalidCypher: neo4j.INeo4jCypherRequest = {\n        statements: [{\n          statement: \"This is not valid\"\n        }]\n      };\n      neo4j.cypher(invalidCypher)\n        .then((response) => {\n          done(response);\n        }).catch((reason) => {\n          done();\n        });\n    });\n  });\n  describe(\"#Node level functions\", function() {\n    let id: number = null;\n    it(\"should fail to create a new Node due to request error\", function(done) {\n      let goodBaseUrl: string = requestOptions.baseUrl;\n      requestOptions.baseUrl = \"WRONG\";\n      neo4j.createNode({ firstName: \"Testing\" })\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          requestOptions.baseUrl = goodBaseUrl;\n          done();\n        });\n    });\n    it(\"should fail to create a new Node due to response error\", function(done) {\n      neo4j.createNode({ nested: { foo: \"bar\" } })\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n    it(\"should create a new Node\", function(done) {\n      neo4j.createNode({ firstName: \"Testing\" })\n        .then((response) => {\n          response.metadata.id.should.be.above(0);\n          id = response.metadata.id;\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should fail to return newly created node due to request error\", function(done) {\n      let goodBaseUrl: string = requestOptions.baseUrl;\n      requestOptions.baseUrl = \"WRONG\";\n      neo4j.getNode(id)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          requestOptions.baseUrl = goodBaseUrl;\n          done();\n        });\n    });\n    it(\"should return newly created node\", function(done) {\n      neo4j.getNode(id)\n        .then((response) => {\n          response.metadata.id.should.equal(id);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should get the degree of the newly created node(0)\", function(done) {\n      neo4j.getNodeDegree(id)\n        .then((response) => {\n          response.should.equal(0);\n          return neo4j.getNodeDegree(id, \"all\");\n        })\n        .then((response) => {\n          response.should.equal(0);\n          return neo4j.getNodeDegree(id, \"all\", \"testing\");\n        })\n        .then((response) => {\n          response.should.equal(0);\n          done();\n        })\n        .catch((reason) => { done(reason); });\n    });\n    it(`should delete newly created node`, function(done) {\n      neo4j.deleteNode(id)\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(`should fail to delete node due to request error`, function(done) {\n      let goodBaseUrl: string = requestOptions.baseUrl;\n      requestOptions.baseUrl = \"WRONG\";\n      neo4j.deleteNode(id)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          requestOptions.baseUrl = goodBaseUrl;\n          done();\n        });\n    });\n    it(`should fail to delete non-existant node`, function(done) {\n      neo4j.deleteNode(id)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n    it(`should not find deleted node`, function(done) {\n      neo4j.getNode(id)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n  });\n  describe(\"#Property level functions\", function() {\n    let id: number = null;\n    before(function(done) {\n      neo4j.createNode({ firstName: \"Testing\" })\n        .then((response) => {\n          id = response.metadata.id;\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n\n    after(function(done) {\n      neo4j.deleteNode(id)\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n\n    it(\"should fail to upsert a single node property\", function(done) {\n      neo4j.setProperty(id, \"WRONG\", \"lastName\", \"Pennetta\")\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n    it(\"should upsert a single node property\", function(done) {\n      neo4j.setProperty(id, \"node\", \"lastName\", \"Pennetta\")\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should upsert node properties\", function(done) {\n      let addedProperties = { newProperty: \"My Property\" };\n      neo4j.updateProperties(id, \"node\", addedProperties)\n        .then((response) => {\n          response.should.equal(true);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should get node properties\", function(done) {\n      neo4j.getProperties(id, \"node\")\n        .then((response) => {\n          response.should.include.keys(\"newProperty\");\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should get a single node property\", function(done) {\n      neo4j.getProperty(id, \"newProperty\", \"node\")\n        .then((response) => {\n          response.should.equal(\"My Property\");\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should fail on null property insert\", function(done) {\n      let myTestNullString: string = null;\n      neo4j.setProperty(id, \"node\", \"nullProperty\", myTestNullString)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n    it(\"should fail on nested property insert.\", function(done) {\n      let myTestNestedObject: any = {\n        \"foo\": {\n          \"bar\": \"baz\"\n        }\n      };\n      neo4j.updateProperties(id, \"node\", myTestNestedObject)\n        .then((response) => {\n          done(response);\n        })\n        .catch((reason) => {\n          done();\n        });\n    });\n    it(\"should delete all properties on a node\", function(done) {\n      neo4j.deleteProperty(id, \"newProperty\", \"node\")\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should delete a single property on a node\", function(done) {\n      neo4j.deleteAllProperties(id, \"node\")\n        .then((response) => {\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n  });\n  describe(\"#Relationship level functions\", function() {\n    let sampleStartNode: neo4j.INode = null;\n    let sampleEndNode: neo4j.INode = null;\n    let sampleNewRelationship: neo4j.IRelationship = null;\n\n    before(function(done) {\n      neo4j.createNode()\n        .then((response) => {\n          sampleStartNode = response;\n          sampleStartNode.self.should.not.equal(null);\n          return neo4j.createNode();\n        })\n        .then((response) => {\n          sampleEndNode = response;\n          sampleEndNode.self.should.not.equal(null);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n\n    it(\"Should create a new relationship\", function(done) {\n      neo4j.createRelationship(sampleStartNode, sampleEndNode, \"MET\", { createdDate: new Date().toISOString() })\n        .then((response) => {\n          sampleNewRelationship = response;\n          sampleNewRelationship.self.should.not.equal(null);\n          sampleNewRelationship.self.should.be.a(\"string\");\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"Should return newly created relationship\", function(done) {\n      neo4j.getRelationship(sampleNewRelationship.metadata.id)\n        .then((response) => {\n          response.self.should.equal(sampleNewRelationship.self);\n          response.data.createdDate.should.not.equal(null);\n          done();\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should add a new property to newly created relationship\", function(done) { done(); });\n    it(\"should set all properties on newly created relationship\", function(done) { done(); });\n    it(\"should set a single property on newly created relationship\", function(done) { done(); });\n    it(\"should get all properties on newly created relationship\", function(done) { done(); });\n    it(\"should get a single property on newly created relationship\", function(done) { done(); });\n    it(\"should delete newly created relationship\", function(done) {\n      neo4j.deleteRelationship(sampleNewRelationship)\n        .then((response) => {\n          done();;\n        })\n        .catch((reason) => {\n          done(reason);\n        });\n    });\n    it(\"should get all relationships on node\", function(done) { done(); });\n    it(\"should get all incoming relationships on node\", function(done) { done(); });\n    it(\"should get all outgoing relationships on node\", function(done) { done(); });\n    it(\"should get all typed relationshipd on a node\", function(done) { done(); });\n  });\n});\n","/**\n * @author Tom Pennetta <tpennetta@gmail.com>\n * TODO: Don't reuse the same instance fo requestOptions for each call.\n */\n\nimport * as path from \"path\";\nimport * as url from \"url\";\nimport * as request from \"request\";\nimport * as util from \"util\";\nimport * as http from \"http\";\n\n//==============================================================================\n// Global request module defaults.\n//==============================================================================\n\nrequest.defaults({\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n//==============================================================================\n// Global constants.\n//==============================================================================\n\nexport enum NEO4J_PROTOCOL { http, https };\n\n// TODO: Change to enums\nconst NEO4J_ENTITY_TYPES: string[] = [\"node\", \"relationship\"];\nconst NEO4J_HTTP_METHODS: string[] = [\"DELETE\", \"GET\", \"POST\", \"PUT\"];\nconst NEO4J_RELATIONSHIP_DIRECTION: string[] = [\"all\", \"in\", \"out\"];\n\nconst NEO4J_STANDARD_PATHS: any = {\n  config: \"/db/data/\",\n  propertyKeys: \"/db/data/propertykeys\"\n};\n\n//==============================================================================\n// Stricty enforced Interfaces\n//==============================================================================\n\nexport interface INeo4jInternalPaths {\n  extensions: any;\n  node: string;\n  node_index: string;\n  relationship_index: string;\n  extensions_info: string;\n  relationship_types: string;\n  batch: string;\n  cypher: string;\n  indexes: string;\n  constraints: string;\n  transaction: string;\n  node_labels: string;\n  neo4j_version: string;\n};\n\nexport interface INeo4jConfig {\n  protocol: NEO4J_PROTOCOL;\n  host: string;\n  port: number;\n  authentication?: INeo4jAuthConfig;\n  streaming?: boolean;\n}\n\nexport interface INeo4jAuthConfig {\n  username: string;\n  password: string;\n}\n\nexport type ResultDataContents = \"REST\" | \"row\" | \"graph\" | \"wrong\";\nexport interface INeo4jCypherRequest {\n  statements: [{\n    statement: string,\n    parameters?: any,\n    resultDataContents?: ResultDataContents[]\n  }];\n}\n\nexport interface INeo4jCypherResponse {\n  results: [{\n    columns: string[],\n    data: [{\n      row: any[]\n    }]\n  }]\n  errors: [{\n    code?: string,\n    message?: string\n  }]\n}\n\nexport interface INeo4jIndexResponse {\n  property_keys: string[],\n  label: string\n}\n\nexport interface INeo4jEntity {\n  extensions?: any;\n  data?: any;\n  property: string;\n  properties: string;\n  self: string;\n  metadata: {\n    id: number,\n    labels?: string[],\n    type?: string\n  };\n}\n\nexport interface INode extends INeo4jEntity {\n  outgoing_relationships: string;\n  labels: string;\n  all_typed_relationships: string;\n  traverse: string;\n  outgoing_typed_relationships: string;\n  incoming_relationships: string;\n  create_relationship: string;\n  paged_traverse: string;\n  all_relationships: string;\n  incoming_typed_relationships: string;\n}\n\nexport interface IRelationship extends INeo4jEntity {\n  start: string;\n  type: string;\n  end: string;\n}\n\ninterface IResponseObject {\n  incomingMessage: http.IncomingMessage;\n  body: any;\n}\n\n//==============================================================================\n// Internal module variables. Connection state properties.\n//==============================================================================\n\nlet connected: boolean = false;\nlet streaming: boolean = false;\nlet graphPaths: INeo4jInternalPaths = null;\nlet relationshipTypes: string[] = [];\nlet requestOptions: request.CoreOptions = {};\nlet dbConfigUrl: url.Url = null;\n\n/**\n * @param  {INeo4jConfig} options\n * @returns Promise\n */\nexport function connect(options: INeo4jConfig): Promise<INeo4jInternalPaths | string> {\n  let promise = new Promise((resolve, reject) => {\n    if (connected && graphPaths && url.parse(graphPaths.node).hostname === options.host) {\n      return resolve(graphPaths);\n    }\n\n    streaming = options.streaming || streaming;\n    if (streaming) {\n      requestOptions.headers = requestOptions.headers || {};\n      requestOptions.headers[\"X-Stream\"] = true;\n    }\n\n    let dbConfigEndpointString: string = `${NEO4J_PROTOCOL[options.protocol]}://${options.host}:${options.port}`;\n    dbConfigEndpointString = url.resolve(dbConfigEndpointString, NEO4J_STANDARD_PATHS.config);\n    dbConfigUrl = url.parse(dbConfigEndpointString);\n\n    requestOptions.method = \"GET\";\n    requestOptions.port = options.port;\n\n    if (options.authentication && typeof options.authentication.username === \"string\" && typeof options.authentication.password === \"string\") {\n      requestOptions.auth = {\n        username: options.authentication.username,\n        password: options.authentication.password\n      };\n    }\n\n    request.get(dbConfigEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(`Error requesting database config REST endpoint: ${err}`);\n      }\n\n      body = typeof body === \"string\" ? JSON.parse(body) : body;\n\n      connected = true;\n      graphPaths = body;\n      resolve(body);\n    });\n  });\n\n  return promise;\n}\n\n/**\n * @returns Promise\n */\nexport function getRelationshipTypes(): Promise<string[]> {\n  let promise: Promise<string[]> = new Promise((resolve, reject) => {\n    request.get(graphPaths.relationship_types, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Invalid HTTP Response code returned: ${response.statusCode}`);\n      }\n      if (typeof body === \"string\") {\n        body = JSON.parse(body);\n      }\n      relationshipTypes = body;\n      resolve(relationshipTypes);\n    });\n  });\n  return promise;\n}\n\n/**\n * @returns Promise\n */\nexport function getAllPropertyKeys(): Promise<string[]> {\n\n  let promise: Promise<string[]> = new Promise((resolve, reject) => {\n    let getAllPropertyKeysEndpoint: string = `${dbConfigUrl.protocol}//${dbConfigUrl.hostname}:${dbConfigUrl.port}${NEO4J_STANDARD_PATHS.propertyKeys}`;\n    request.get(getAllPropertyKeysEndpoint, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode >= 400) {\n        reject(`Invalid HTTP Response code returned: ${response.statusCode}`);\n      } else {\n        body = typeof body === \"string\" ? JSON.parse(body) : body;\n        resolve(body);\n      }\n    });\n  });\n\n  return promise;\n}\n\n//==============================================================================\n// Index Schema functions\n//==============================================================================\n\nexport function createIndex(label: string, propertyNames: string | string[]): Promise<INeo4jIndexResponse> {\n  let promise: Promise<INeo4jIndexResponse> = new Promise((resolve, reject) => {\n    let normalizedPropertyNamesArray: string[] = [];\n    if (typeof propertyNames === \"string\") {\n      normalizedPropertyNamesArray.push(propertyNames);\n    } else {\n      normalizedPropertyNamesArray = propertyNames;\n    }\n\n    let indexEndpointString: string = `${graphPaths.indexes}/${label}`;\n    try {\n      requestOptions.body = JSON.stringify({ \"property_keys\": normalizedPropertyNamesArray });\n    } catch (ex) {\n      reject(ex);\n    }\n    request.post(indexEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error creating index on label ${label}. HTTP Status Code: ${response.statusCode}. HTTP Body: ${body}`);\n      }\n      body = typeof body === \"string\" ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\nexport function listIndexesForLabel(label: string): Promise<INeo4jIndexResponse> {\n  let promise: Promise<INeo4jIndexResponse> = new Promise((resolve, reject) => {\n    let indexEndpointString: string = `${graphPaths.indexes}/${label}`;\n    request.get(indexEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error creating index on label ${label}. HTTP Status Code: ${response.statusCode}. HTTP Body: ${body}`);\n      }\n      body = typeof body === \"string\" ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\nexport function dropIndex(label: string, propertyName: string): Promise<boolean> {\n  let promise: Promise<boolean> = new Promise((resolve, reject) => {\n    let indexEndpointString: string = `${graphPaths.indexes}/${label}/${propertyName}`;\n    request.del(indexEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error creating index on label ${label}. HTTP Status Code: ${response.statusCode}. HTTP Body: ${body}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n//==============================================================================\n// CYPHER FTW!!!\n//==============================================================================\n\nexport function cypher(cypherStatements: INeo4jCypherRequest): Promise<INeo4jCypherResponse> {\n  let promise = new Promise((resolve, reject) => {\n    let cypherEndpointString: string = `${graphPaths.transaction}/commit`;\n    try {\n      requestOptions.body = JSON.stringify(cypherStatements);\n    } catch (ex) {\n      reject(ex);\n    }\n    request.post(cypherEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200 && response.statusCode !== 201) {\n        reject();\n      }\n      body = typeof body === \"string\" ? JSON.parse(body) : body;\n      if (body.errors.length > 0) {\n        reject(body.errors);\n      }\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\n//==============================================================================\n// Node/Vertex functions\n//==============================================================================\n\n/**\n * @param  {number} id\n * @returns Promise\n */\nexport function getNode(id: number): Promise<INode> {\n  let promise = new Promise((resolve, reject) => {\n    let nodeEndpointString: string = `${graphPaths.node}/${id}`;\n    request.get(nodeEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode >= 400) {\n        reject(`Invalid HTTP Response code returned: ${response.statusCode}`);\n      }\n      body = typeof body === \"string\" ? JSON.parse(body) : body;\n      let returnedNode: INode = body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n/**\n * @param  {any} data?\n * @returns Promise\n */\nexport function createNode(data?: any): Promise<INode> {\n  let promise = new Promise((resolve, reject) => {\n    let nodeEndpointString: string = graphPaths.node;\n    data = data || {};\n    requestOptions.body = typeof data !== \"string\" ? JSON.stringify(data) : data;\n    request.post(nodeEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 201) {\n        reject(`Invalid HTTP Response when inserting Node: ${response.statusCode}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      let returnedNode: INode = body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} id\n * @returns Promise\n */\nexport function deleteNode(id: number): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let nodeEndpointString: string = `${graphPaths.node}/${id}`;\n    request.del(nodeEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode === 409) {\n        reject(`All relationships for Node id ${id} must be deleted prior to deleting node itself.`);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error deleting Node. HTTP Status code returned: ${response.statusCode}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\nexport function getNodeDegree(nodeOrNodeId: INode | number, direction?: string, type?: string): Promise<number> {\n  let promise = new Promise((resolve, reject) => {\n    let degreeEndpointString = `${_getNeo4jEntityUrl(nodeOrNodeId, \"node\")}/degree`;\n    direction = direction || \"all\";\n    if (direction && NEO4J_RELATIONSHIP_DIRECTION.indexOf(direction) !== -1) {\n      degreeEndpointString = url.resolve(`${degreeEndpointString}/`, direction);\n    } else {\n      reject(`'direction' must be of value: ${NEO4J_RELATIONSHIP_DIRECTION}`);\n    }\n    if (type && typeof type === \"string\") {\n      degreeEndpointString = url.resolve(`${degreeEndpointString}/`, type)\n    }\n    request.get(degreeEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error retrieving node degree. HTTP Status code returned: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\n//==============================================================================\n// Property functions\n//==============================================================================\n\n/**\n * @param  {number} nodeId\n * @param  {string} propertyName\n * @param  {number|string|boolean|number[]|string[]|boolean[]} data\n * @returns Promise\n */\nexport function setProperty(entityOrEntityId: INeo4jEntity | number, type: string, propertyName: string, data: number | string | boolean | number[] | string[] | boolean[]): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let propertyEndpointString: string = null;\n    try {\n      propertyEndpointString = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties/${propertyName}`;\n    } catch (ex) {\n      reject(ex);\n    }\n\n    if (!data) {\n      reject(`Property cannot have null value.`);\n    }\n    data = `\"${data}\"`;\n    requestOptions.body = data;\n    request.put(propertyEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error setting property: ${propertyName} on Node: ${_getNeo4jEntityId(entityOrEntityId)}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} nodeId\n * @param  {any} data\n * @returns Promise\n */\nexport function updateProperties(entityOrEntityId: INeo4jEntity | number, type: string, data: any): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let entityId: number = null;\n\n    let propertiesEndpointString: string = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties`;\n    if (typeof data !== \"string\") {\n      try {\n        data = JSON.stringify(data);\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n    requestOptions.body = data;\n    request.put(propertiesEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error setting properties on Node: ${entityId}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} nodeId\n */\nexport function getProperties(entityOrEntityId: INeo4jEntity | number, type: string) {\n  let promise = new Promise((resolve, reject) => {\n    let propertiesEndpointString: string = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties`;\n    request.get(propertiesEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error getting properties on Node: ${_getNeo4jEntityId(entityOrEntityId)}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} nodeId\n * @param  {string} propertyName\n * @returns Promise\n */\nexport function getProperty(entityOrEntityId: INeo4jEntity | number, propertyName: string, type: string): Promise<number | string | boolean | number[] | string[] | boolean[]> {\n  let promise = new Promise((resolve, reject) => {\n    let propertyEndpointString: string = null;\n    try {\n      propertyEndpointString = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties/${propertyName}`;\n    } catch (ex) {\n      reject(ex);\n    }\n    request.get(propertyEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error getting property ${propertyName} on Node: ${_getNeo4jEntityId(entityOrEntityId)}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} nodeId\n * @param  {string} propertyName\n * @returns Promise\n */\nexport function deleteProperty(entityOrEntityId: INeo4jEntity | number, propertyName: string, type: string): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let propertyEndpointString: string = null;\n    try {\n      propertyEndpointString = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties/${propertyName}`;\n    } catch (ex) {\n      reject(ex);\n    }\n    request.del(propertyEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error deleting property ${propertyName} on Node: ${_getNeo4jEntityId(entityOrEntityId)}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n/**\n * @param  {number} nodeId\n * @returns Promise\n */\nexport function deleteAllProperties(entityOrEntityId: INeo4jEntity | number, type: string): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let propertiesEndpointString: string = null;\n    try {\n      propertiesEndpointString = `${_getNeo4jEntityUrl(entityOrEntityId, type)}/properties`;\n    } catch (ex) {\n      reject(ex);\n    }\n    request.del(propertiesEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error deleting properties on Node: ${_getNeo4jEntityId(entityOrEntityId)}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n//==============================================================================\n// Relationship functions\n//==============================================================================\n\nexport function getRelationship(relationshipId: number | IRelationship, direction?: string, types?: string[]): Promise<IRelationship> {\n  let promise = new Promise((resolve, reject) => {\n    if (direction && NEO4J_RELATIONSHIP_DIRECTION.indexOf(direction) === -1) {\n      reject(`Relationship 'direction' must be of type: ${NEO4J_RELATIONSHIP_DIRECTION}`);\n    }\n    let relationshipEndpointString: string = url.resolve(dbConfigUrl.href, `relationship/${relationshipId}`);\n    request.get(relationshipEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 200) {\n        reject(`Error getting relationship by ID ${relationshipId}. Received HTTP status code: ${response.statusCode}. HTTP body: ${body}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\nexport function createRelationship(startNode: INode | string | number, toNode: INode | string | number, type?: string, data?: any): Promise<IRelationship> {\n  let promise = new Promise((resolve, reject) => {\n    let relationshipStartEndpointString: string = null;\n    let relationshipEndEndpointString: string = null;\n    try {\n      relationshipStartEndpointString = `${_getNeo4jEntityUrl(startNode, \"node\")}/relationships`;\n      relationshipEndEndpointString = `${_getNeo4jEntityUrl(toNode, \"node\")}`;\n    } catch (ex) {\n      reject(ex);\n    }\n\n    let body: any = {\n      to: relationshipEndEndpointString,\n      type,\n      data\n    };\n    try {\n      body = JSON.stringify(body);\n    } catch (ex) {\n      reject(ex);\n    }\n    requestOptions.body = body;\n    request.post(relationshipStartEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 201) {\n        reject(`Error inserting relationship. received invalid HTTP status code: ${response.statusCode}, and message: ${response.statusMessage}`);\n      }\n      body = typeof body === \"string\" && body.length > 0 ? JSON.parse(body) : body;\n      resolve(body);\n    });\n  });\n  return promise;\n}\n\nexport function deleteRelationship(relationshipOrRelationshipId: number | IRelationship): Promise<boolean> {\n  let promise = new Promise((resolve, reject) => {\n    let relationshipEndpointString: string = _getNeo4jEntityUrl(relationshipOrRelationshipId, \"relationship\");\n    request.del(relationshipEndpointString, requestOptions, (err, response, body) => {\n      if (err) {\n        reject(err);\n      }\n      if (response.statusCode !== 204) {\n        reject(`Error deleting relationship. received invalid HTTP status code: ${response.statusCode}, and message: ${response.statusMessage}`);\n      }\n      resolve(true);\n    });\n  });\n  return promise;\n}\n\n//==============================================================================\n// Module Accessor/Mutator functions\n//==============================================================================\n\n/**\n * @returns boolean\n */\nexport function isConnected(): boolean {\n  return connected;\n}\n\n/**\n * @returns boolean\n */\nexport function isStreaming(): boolean {\n  return streaming;\n}\n\n/**\n * @param  {boolean} reqStreaming\n * @returns boolean\n */\nexport function setStreaming(reqStreaming: boolean): boolean {\n  return streaming = reqStreaming;\n}\n\nexport function getRequestOptions(): request.CoreOptions {\n  return requestOptions;\n}\n\n//==============================================================================\n// Private module functions\n//==============================================================================\n\nfunction _getNeo4jEntityUrl(entity: INeo4jEntity | string | number, type: string): string {\n  if (typeof entity === \"object\") {\n    if (entity.self) {\n      return entity.self;\n    } else {\n      throw new TypeError(`object must have property 'self'`);\n    }\n  } else if (typeof entity === \"string\") {\n    try {\n      url.parse(entity);\n    } catch (ex) {\n      throw ex;\n    }\n    return entity;\n  } else if (typeof entity === \"number\") {\n    if (type === \"node\") {\n      return `${graphPaths.node}/${entity}`;\n    } else if (type === \"relationship\") {\n      return `${dbConfigUrl}/relationship/${entity}`;\n    } else {\n      throw new TypeError();\n    }\n  } else {\n    throw new TypeError(`startNode must be of type: INode, string, number`);\n  }\n}\n\nfunction _getNeo4jEntityId(entityOrEntityId: INeo4jEntity | number): number {\n  if (typeof entityOrEntityId === \"object\" && entityOrEntityId.hasOwnProperty(\"metadata\")) {\n    return entityOrEntityId.metadata.id;\n  } else if (typeof entityOrEntityId === \"number\") {\n    return entityOrEntityId;\n  } else {\n    throw new TypeError(`Invalid entityOrEntityId type. Must be of type: INeo4jEntity or number`);\n  }\n}\n"],"sourceRoot":".."}