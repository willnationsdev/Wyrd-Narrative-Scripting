{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/welcome.ts","src/resources/index.ts","src/components/about/about.ts","src/components/home/home.ts","src/wyrd-neo4j-utility.ts"],"names":[],"mappings":";;;IAKA;QAAA;QAoDA,CAAC;QAtBC,6BAAe,GAAf,UAAgB,MAA2B,EAAE,MAAc;YACzD,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;YAEzB,MAAM,CAAC,GAAG,CAAC;gBACP,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC;oBACnB,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,wBAAwB;oBAClC,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,MAAM;iBACd;gBACD,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC;oBAChB,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,0BAA0B;oBACpC,GAAG,EAAE,IAAI;oBACT,KAAK,EAAC,OAAO;iBACd;aAEJ,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;QAEH,UAAC;IAAD,CApDA,AAoDC,IAAA;IApDY,kBAAG;;;;;;;;ICLhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;;;ICAF,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC;aACpB,MAAM,EAAE;aACR,OAAO,EAAE;aACT,eAAe,EAAE,CAAC;QAErB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAjBD,8BAiBC;;;;;;;;ICpBD;QAAA;QAAsB,CAAC;QAAD,cAAC;IAAD,CAAtB,AAAuB,IAAA;IAAV,0BAAO;;;;;;;;ICEpB,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC;;;;;;;;ICJD;QAAA;QAAoB,CAAC;QAAD,YAAC;IAAD,CAApB,AAAqB,IAAA;IAAR,sBAAK;;;;;;;;ICAlB;QAAA;QAAmB,CAAC;QAAD,WAAC;IAAD,CAAnB,AAAoB,IAAA;IAAP,oBAAI;;;;;;;;ICEjB;QAAA;QAeA,CAAC;QAdiB,kBAAK,GAAnB,UAAoB,MAA0B,EAAE,OAAkC;YAC9E,IAAI,QAAoC,CAAC;YACzC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;gBAChC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gBAEtC,IAAI,MAAM,GAAQ;oBACd,SAAS,EAAE,MAAM;oBACjB,QAAQ,EAAE,KAAK;iBAClB,CAAC;gBAEF,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC,CAAC,CAAA;YACF,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QACL,mBAAC;IAAD,CAfA,AAeC,IAAA;IAfY,oCAAY","file":"app-bundle.js","sourcesContent":["import {RouterConfiguration, Router} from 'aurelia-router';\r\nimport {inject} from 'aurelia-framework';\r\nimport {Neo4jUtility} from './wyrd-neo4j-utility';\r\n//import * as neo4j from 'neo4j-typescript';\r\n\r\nexport class App {\r\n\r\n  // The Router responsible for re-routing web traffic to the App.\r\n  public router: Router;\r\n\r\n  /*\r\n  // The Neo4j database configuration object.\r\n  // Defines access methodology and credentials.\r\n  //\r\n  public neo4jConfig: neo4j.INeo4jConfig = {\r\n    // The credentials with which to access the neo4j API\r\n    authentication: {\r\n      username: \"neo4j\",\r\n      password: \"neo4j\"\r\n    },\r\n    // The protocol used to access the neo4j object\r\n    protocol: neo4j.NEO4J_PROTOCOL.http,\r\n    // The host in which to find the neo4j object\r\n    host: \"localhost\",\r\n    // The port in which to find the neo4j object\r\n    port: 7474\r\n  };\r\n  */\r\n\r\n  //\r\n  // configureRouter\r\n  // \r\n  // @param config The configuration for routers associated with the App\r\n  // @param router The router responsible for managing the defined routes.\r\n  //\r\n  configureRouter(config: RouterConfiguration, router: Router): void {\r\n    config.title = \"Aurelia\";\r\n\r\n    config.map([\r\n        { route: ['', 'home'], \r\n          name: 'home', \r\n          moduleId: './components/home/home',\r\n          nav: true,\r\n          title: 'Home'\r\n        },\r\n        { route: ['about'], \r\n          name: 'about',\r\n          moduleId: './components/about/about',\r\n          nav: true,\r\n          title:'About'\r\n        }\r\n\r\n    ]);\r\n\r\n    this.router = router;\r\n  }\r\n\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\r\nimport environment from './environment';\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources')\r\n    .router()\r\n    .history()\r\n    .eventAggregator();\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}","export class Welcome {}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","export class About {}","export class Home {}","import * as neo4j from \"neo4j-typescript\";\r\n\r\nexport class Neo4jUtility {\r\n    public static query(config: neo4j.INeo4jConfig, request: neo4j.INeo4jCypherRequest): neo4j.INeo4jCypherResponse {\r\n        let response: neo4j.INeo4jCypherResponse;\r\n        neo4j.connect(config).then((response) => {\r\n            console.log(\"Successfully connected\");\r\n\r\n            let myNode: any = {\r\n                firstName: \"John\",\r\n                lastName: \"Doe\"\r\n            };\r\n\r\n            response = neo4j.cypher(request);\r\n        })\r\n        return response;\r\n    }\r\n}"],"sourceRoot":".."}